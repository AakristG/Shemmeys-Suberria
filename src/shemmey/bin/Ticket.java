import java.util.*;
import java.io.*;
import java.awt.*;

/**
 * Ticket class which enables an order to be generated
 */
public class Ticket {
  private Order order;
  private boolean ordered;
  private String url;

  /**
   * Constructs a ticket object to house each order
   */
  public Ticket(){
    url = "src/resources/Images/ticket.png";
    order = new Order();
    ordered = false;
  }

  /**
   * Method that shows the image URL of the ticket
   *
   * @return the file path as a string
   */
  public String getUrl(){return url;}

  /**
   * Method that checks if an order was already placed by the current customer
   *
   * @return the state of the order as true or false
   */
  public boolean isOrderPlaced(){return ordered;}

  /**
   * Method that shows the order placed by the customer
   *
   * @return the Order object from the customer
   */
  public Order getOrder(){return order;}

  /**
   * Creates a new order generated by Order class
   */
  public void placeOrder(){
    order.randomGen();
    ordered = true;
  }

  /**
   * Shows the list of ingredients from order placed
   *
   * @return the String of ingredients
   */
  public String processOrder(){
    String sent = "SANDWICH COMPONENTS:<br><br>";
    if(order.isToasted())
      sent += "- Toasted<br><br>";
    else
      sent += "- Untoasted<br><br>";
    sent += order.getIngreds().processIngreds();
    return sent;
  }

  /**
   * Checks if the sandwich is grilled
   *
   * @return the boolean of if the order wants the sandwich grilled
   */
  public boolean isGrilled(){
    boolean grilled = order.isToasted();
    return grilled;
  }

  /**
   * Resets the ticket to allow for a new order to be placed
   */
  public void finishTicket(){
    order = new Order();
    ordered = false;
  }

  /**
   * Method that evaluates the accuracy of the sandwich relative to the order
   * 
   * @param s the Sandwich object to be evaluated
   * @return the score the sandwich deserves as an integer
   */
  public int checkSandwich(Sandwich s){
    int eval = 100;
    Ingredients ingredients = order.getIngreds();
    PriorityQueue<Ingredient> ticketQueue = ingredients.getIngredients();
    int count = 1 + ticketQueue.size();
    int amount = 100/count;
    System.out.println("Amount each subtract is worth: " +amount);
    Queue<Ingredient> sandwichQueue = s.getActualIngreds();
    if(order.isToasted() != s.isToasted())
      eval -= amount;
    while(ticketQueue.size() > 0 && sandwichQueue.size() > 0)
      {
        Ingredient tickI = ticketQueue.poll();
        Ingredient sandI = sandwichQueue.poll();
        if(tickI.getEvaluator() != sandI.getEvaluator())
          eval -= amount;
      }
    if(sandwichQueue.size() > 0)
    {
      while(sandwichQueue.size() > 0){
         sandwichQueue.poll();
         eval -= amount;
      }
    }
    if(ticketQueue.size() > 0)
    {
      while(ticketQueue.size() > 0){
        ticketQueue.poll();
        eval -= amount;
      }
    }
   return eval;   
  }

}